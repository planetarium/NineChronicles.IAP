name: NineChronicles.IAP

on:
  push:
    branches:
      - development
      - release/*
      - main
      - feature/github-actions  # for test


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'mainnet' || (startsWith(github.ref, 'refs/heads/release') && 'internal' || 'development') }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-in-project: true

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install
          pushd iap/frontend
          yarn install
          popd
          yarn add aws-cdk

      - name: Create API Lambda layer
        run: |
          pushd iap
          poetry export --with=iap --without-hashes -o requirements.txt
          pip install -r requirements.txt -t layer/python/lib/python3.10/site-packages/
          popd

      - name: Create Worker Lambda layer
        run: |
          pushd worker
          poetry export --with=worker --without-hashes -o requirements.txt
          pip install -r requirements.txt -t layer/python/lib/python3.10/site-packages/
          popd

      - name: Build frontend
        run: |
          pushd iap/frontend
          yarn build
          popd

      - name: Synth stack
        env:
          STAGE: ${{ vars.STAGE }}
          REGION_NAME: ${{ vars.REGION_NAME }}
          ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          HEADLESS: ${{ vars.HEADLESS }}
          KMS_KEY_ID: ${{ secrets.KMS_KEY_ID }}
          GOOGLE_CREDENTIAL: ${{ secrets.GOOGLE_CREDENTIAL }}
        run: |
          source $VENV
          yarn cdk synth

      - name: Deploy stack
        env:
          STAGE: ${{ vars.STAGE }}
          REGION_NAME: ${{ vars.REGION_NAME }}
          ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          source $VENV
          yarn cdk deploy --all --require-approval never

#      - name: Upgrade DB Schema
#        env:
#          STAGE: ${{vars.STAGE}}
#          REGION_NAME: ${{ vars.REGION_NAME }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: |
#          source $VENV
#          pushd common
#          python scripts/update_alembic_ini.py
#          alembic upgrade head -n ${{vars.STAGE}}
#          popd
